{"ast":null,"code":"\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\");\nvar intersectEllipse = require(\"./intersect/intersect-ellipse\");\nvar intersectCircle = require(\"./intersect/intersect-circle\");\nvar intersectPolygon = require(\"./intersect/intersect-polygon\");\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\").attr(\"rx\", node.rx).attr(\"ry\", node.ry).attr(\"x\", -bbox.width / 2).attr(\"y\", -bbox.height / 2).attr(\"width\", bbox.width).attr(\"height\", bbox.height);\n  node.intersect = function (point) {\n    return intersectRect(node, point);\n  };\n  return shapeSvg;\n}\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent.insert(\"ellipse\", \":first-child\").attr(\"x\", -bbox.width / 2).attr(\"y\", -bbox.height / 2).attr(\"rx\", rx).attr(\"ry\", ry);\n  node.intersect = function (point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n  return shapeSvg;\n}\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent.insert(\"circle\", \":first-child\").attr(\"x\", -bbox.width / 2).attr(\"y\", -bbox.height / 2).attr(\"r\", r);\n  node.intersect = function (point) {\n    return intersectCircle(node, r, point);\n  };\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = bbox.width * Math.SQRT2 / 2;\n  var h = bbox.height * Math.SQRT2 / 2;\n  var points = [{\n    x: 0,\n    y: -h\n  }, {\n    x: -w,\n    y: 0\n  }, {\n    x: 0,\n    y: h\n  }, {\n    x: w,\n    y: 0\n  }];\n  var shapeSvg = parent.insert(\"polygon\", \":first-child\").attr(\"points\", points.map(function (p) {\n    return p.x + \",\" + p.y;\n  }).join(\" \"));\n  node.intersect = function (p) {\n    return intersectPolygon(node, points, p);\n  };\n  return shapeSvg;\n}","map":{"version":3,"names":["intersectRect","require","intersectEllipse","intersectCircle","intersectPolygon","module","exports","rect","ellipse","circle","diamond","parent","bbox","node","shapeSvg","insert","attr","rx","ry","width","height","intersect","point","r","Math","max","w","SQRT2","h","points","x","y","map","p","join"],"sources":["C:/Users/emmed/Documents/char_test/frontend/node_modules/dagre-d3/lib/shapes.js"],"sourcesContent":["\"use strict\";\n\nvar intersectRect = require(\"./intersect/intersect-rect\");\nvar intersectEllipse = require(\"./intersect/intersect-ellipse\");\nvar intersectCircle = require(\"./intersect/intersect-circle\");\nvar intersectPolygon = require(\"./intersect/intersect-polygon\");\n\nmodule.exports = {\n  rect: rect,\n  ellipse: ellipse,\n  circle: circle,\n  diamond: diamond\n};\n\nfunction rect(parent, bbox, node) {\n  var shapeSvg = parent.insert(\"rect\", \":first-child\")\n    .attr(\"rx\", node.rx)\n    .attr(\"ry\", node.ry)\n    .attr(\"x\", -bbox.width / 2)\n    .attr(\"y\", -bbox.height / 2)\n    .attr(\"width\", bbox.width)\n    .attr(\"height\", bbox.height);\n\n  node.intersect = function(point) {\n    return intersectRect(node, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction ellipse(parent, bbox, node) {\n  var rx = bbox.width / 2;\n  var ry = bbox.height / 2;\n  var shapeSvg = parent.insert(\"ellipse\", \":first-child\")\n    .attr(\"x\", -bbox.width / 2)\n    .attr(\"y\", -bbox.height / 2)\n    .attr(\"rx\", rx)\n    .attr(\"ry\", ry);\n\n  node.intersect = function(point) {\n    return intersectEllipse(node, rx, ry, point);\n  };\n\n  return shapeSvg;\n}\n\nfunction circle(parent, bbox, node) {\n  var r = Math.max(bbox.width, bbox.height) / 2;\n  var shapeSvg = parent.insert(\"circle\", \":first-child\")\n    .attr(\"x\", -bbox.width / 2)\n    .attr(\"y\", -bbox.height / 2)\n    .attr(\"r\", r);\n\n  node.intersect = function(point) {\n    return intersectCircle(node, r, point);\n  };\n\n  return shapeSvg;\n}\n\n// Circumscribe an ellipse for the bounding box with a diamond shape. I derived\n// the function to calculate the diamond shape from:\n// http://mathforum.org/kb/message.jspa?messageID=3750236\nfunction diamond(parent, bbox, node) {\n  var w = (bbox.width * Math.SQRT2) / 2;\n  var h = (bbox.height * Math.SQRT2) / 2;\n  var points = [\n    { x:  0, y: -h },\n    { x: -w, y:  0 },\n    { x:  0, y:  h },\n    { x:  w, y:  0 }\n  ];\n  var shapeSvg = parent.insert(\"polygon\", \":first-child\")\n    .attr(\"points\", points.map(function(p) { return p.x + \",\" + p.y; }).join(\" \"));\n\n  node.intersect = function(p) {\n    return intersectPolygon(node, points, p);\n  };\n\n  return shapeSvg;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}