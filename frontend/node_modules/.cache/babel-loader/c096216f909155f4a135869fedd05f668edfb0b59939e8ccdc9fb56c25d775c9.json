{"ast":null,"code":"\"use strict\";\n\n/* IMPORT */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar hex_1 = require(\"./hex\");\nvar keyword_1 = require(\"./keyword\");\nvar rgb_1 = require(\"./rgb\");\nvar hsl_1 = require(\"./hsl\");\n/* COLOR */\nvar Color = {\n  /* VARIABLES */\n  format: {\n    keyword: keyword_1.default,\n    hex: hex_1.default,\n    rgb: rgb_1.default,\n    rgba: rgb_1.default,\n    hsl: hsl_1.default,\n    hsla: hsl_1.default\n  },\n  /* API */\n  parse: function (color) {\n    if (typeof color !== 'string') return color;\n    var channels = hex_1.default.parse(color) || rgb_1.default.parse(color) || hsl_1.default.parse(color) || keyword_1.default.parse(color); // Color providers ordered with performance in mind\n    if (channels) return channels;\n    throw new Error(\"Unsupported color format: \\\"\" + color + \"\\\"\");\n  },\n  stringify: function (channels) {\n    // SASS returns a keyword if possible, but we avoid doing that as it's slower and doesn't really add any value\n    if (!channels.changed && channels.color) return channels.color;\n    if (channels.type.is(2 /* HSL */) || channels.data.r === undefined) {\n      return hsl_1.default.stringify(channels);\n    } else if (channels.a < 1 || !Number.isInteger(channels.r) || !Number.isInteger(channels.g) || !Number.isInteger(channels.b)) {\n      return rgb_1.default.stringify(channels);\n    } else {\n      return hex_1.default.stringify(channels);\n    }\n  }\n};\n/* EXPORT */\nexports.default = Color;","map":{"version":3,"names":["Object","defineProperty","exports","value","hex_1","require","keyword_1","rgb_1","hsl_1","Color","format","keyword","default","hex","rgb","rgba","hsl","hsla","parse","color","channels","Error","stringify","changed","type","is","data","r","undefined","a","Number","isInteger","g","b"],"sources":["C:/Users/emmed/Documents/char_test/frontend/node_modules/react-mermaid2/node_modules/khroma/dist/color/index.js"],"sourcesContent":["\"use strict\";\n/* IMPORT */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar hex_1 = require(\"./hex\");\nvar keyword_1 = require(\"./keyword\");\nvar rgb_1 = require(\"./rgb\");\nvar hsl_1 = require(\"./hsl\");\n/* COLOR */\nvar Color = {\n    /* VARIABLES */\n    format: {\n        keyword: keyword_1.default,\n        hex: hex_1.default,\n        rgb: rgb_1.default,\n        rgba: rgb_1.default,\n        hsl: hsl_1.default,\n        hsla: hsl_1.default\n    },\n    /* API */\n    parse: function (color) {\n        if (typeof color !== 'string')\n            return color;\n        var channels = hex_1.default.parse(color) || rgb_1.default.parse(color) || hsl_1.default.parse(color) || keyword_1.default.parse(color); // Color providers ordered with performance in mind\n        if (channels)\n            return channels;\n        throw new Error(\"Unsupported color format: \\\"\" + color + \"\\\"\");\n    },\n    stringify: function (channels) {\n        // SASS returns a keyword if possible, but we avoid doing that as it's slower and doesn't really add any value\n        if (!channels.changed && channels.color)\n            return channels.color;\n        if (channels.type.is(2 /* HSL */) || channels.data.r === undefined) {\n            return hsl_1.default.stringify(channels);\n        }\n        else if (channels.a < 1 || !Number.isInteger(channels.r) || !Number.isInteger(channels.g) || !Number.isInteger(channels.b)) {\n            return rgb_1.default.stringify(channels);\n        }\n        else {\n            return hex_1.default.stringify(channels);\n        }\n    }\n};\n/* EXPORT */\nexports.default = Color;\n"],"mappings":"AAAA,YAAY;;AACZ;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,IAAIE,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC;AAC5B;AACA,IAAII,KAAK,GAAG;EACR;EACAC,MAAM,EAAE;IACJC,OAAO,EAAEL,SAAS,CAACM,OAAO;IAC1BC,GAAG,EAAET,KAAK,CAACQ,OAAO;IAClBE,GAAG,EAAEP,KAAK,CAACK,OAAO;IAClBG,IAAI,EAAER,KAAK,CAACK,OAAO;IACnBI,GAAG,EAAER,KAAK,CAACI,OAAO;IAClBK,IAAI,EAAET,KAAK,CAACI;EAChB,CAAC;EACD;EACAM,KAAK,EAAE,SAAAA,CAAUC,KAAK,EAAE;IACpB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EACzB,OAAOA,KAAK;IAChB,IAAIC,QAAQ,GAAGhB,KAAK,CAACQ,OAAO,CAACM,KAAK,CAACC,KAAK,CAAC,IAAIZ,KAAK,CAACK,OAAO,CAACM,KAAK,CAACC,KAAK,CAAC,IAAIX,KAAK,CAACI,OAAO,CAACM,KAAK,CAACC,KAAK,CAAC,IAAIb,SAAS,CAACM,OAAO,CAACM,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC;IACzI,IAAIC,QAAQ,EACR,OAAOA,QAAQ;IACnB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,GAAGF,KAAK,GAAG,IAAI,CAAC;EAClE,CAAC;EACDG,SAAS,EAAE,SAAAA,CAAUF,QAAQ,EAAE;IAC3B;IACA,IAAI,CAACA,QAAQ,CAACG,OAAO,IAAIH,QAAQ,CAACD,KAAK,EACnC,OAAOC,QAAQ,CAACD,KAAK;IACzB,IAAIC,QAAQ,CAACI,IAAI,CAACC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,IAAIL,QAAQ,CAACM,IAAI,CAACC,CAAC,KAAKC,SAAS,EAAE;MAChE,OAAOpB,KAAK,CAACI,OAAO,CAACU,SAAS,CAACF,QAAQ,CAAC;IAC5C,CAAC,MACI,IAAIA,QAAQ,CAACS,CAAC,GAAG,CAAC,IAAI,CAACC,MAAM,CAACC,SAAS,CAACX,QAAQ,CAACO,CAAC,CAAC,IAAI,CAACG,MAAM,CAACC,SAAS,CAACX,QAAQ,CAACY,CAAC,CAAC,IAAI,CAACF,MAAM,CAACC,SAAS,CAACX,QAAQ,CAACa,CAAC,CAAC,EAAE;MACxH,OAAO1B,KAAK,CAACK,OAAO,CAACU,SAAS,CAACF,QAAQ,CAAC;IAC5C,CAAC,MACI;MACD,OAAOhB,KAAK,CAACQ,OAAO,CAACU,SAAS,CAACF,QAAQ,CAAC;IAC5C;EACJ;AACJ,CAAC;AACD;AACAlB,OAAO,CAACU,OAAO,GAAGH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}